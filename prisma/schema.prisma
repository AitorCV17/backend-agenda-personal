datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id            String   @id @default(uuid())
  nombre        String
  email         String   @unique
  password      String
  rol           Rol      @default(USUARIO)
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  eliminadoEn   DateTime?

  // Relaciones
  eventos       Evento[]           @relation("EventosOrganizados")
  participantes ParticipanteEvento[]
  refreshTokens RefreshToken[]
  recordatorios Recordatorio[]
  calendarios   Calendario[]
  notas         Nota[]
  horarios      Horario[]
}

model Evento {
  id              String     @id @default(uuid())
  titulo          String
  descripcion     String?
  ubicacion       String?
  fechaInicio     DateTime
  fechaFin        DateTime
  creadoEn        DateTime   @default(now())
  actualizadoEn   DateTime   @updatedAt
  eliminadoEn     DateTime?
  organizadorId   String
  organizador     Usuario    @relation("EventosOrganizados", fields: [organizadorId], references: [id])
  participantes   ParticipanteEvento[]
  recordatorios   Recordatorio[]

  @@index([organizadorId])
}

model ParticipanteEvento {
  id                String           @id @default(uuid())
  eventoId          String
  usuarioId         String
  estadoAsistencia  EstadoAsistencia @default(PENDIENTE)
  creadoEn          DateTime         @default(now())
  actualizadoEn     DateTime         @updatedAt

  evento  Evento  @relation(fields: [eventoId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

model Recordatorio {
  id              String   @id @default(uuid())
  eventoId        String
  usuarioId       String?
  enviado         Boolean  @default(false)
  creadoEn        DateTime @default(now())
  actualizadoEn   DateTime @updatedAt

  evento  Evento   @relation(fields: [eventoId], references: [id])
  usuario Usuario? @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
}

model RefreshToken {
  id               String   @id @default(uuid())
  usuarioId        String
  token            String   @unique
  fecha_expiracion DateTime
  usuario          Usuario  @relation(fields: [usuarioId], references: [id])
}

model Calendario {
  id             String   @id @default(uuid())
  titulo         String
  usuarioId      String
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt
  eliminadoEn    DateTime?
  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
}

model Nota {
  id             String   @id @default(uuid())
  titulo         String
  contenido      String?
  usuarioId      String
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt
  eliminadoEn    DateTime?
  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
}

model Horario {
  id             String   @id @default(uuid())
  inicio         DateTime
  fin            DateTime
  usuarioId      String
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt
  eliminadoEn    DateTime?
  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
}

enum Rol {
  USUARIO
  ADMIN
}

enum EstadoAsistencia {
  ACEPTADO
  RECHAZADO
  PENDIENTE
}
